// <auto-generated />
using System;
using Auth.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Auth.DataLayer.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20200914051211_j")]
    partial class j
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Auth.DataLayer.Models.OrganizationDistrictLinks.OrganizationDistrictLink", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid");

                    b.HasKey("OrganizationId", "DistrictId");

                    b.ToTable("OrganizationDistrictLinks");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.OrganizationRequisites.OrganizationRequisite", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("BankCorrespAccount")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("BankTitle")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Bik")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Email")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Fax")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Inn")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Kpp")
                        .HasColumnType("character varying(9)")
                        .HasMaxLength(9);

                    b.Property<string>("LegalAddress")
                        .HasColumnType("text");

                    b.Property<string>("Ogrn")
                        .HasColumnType("character varying(13)")
                        .HasMaxLength(13);

                    b.Property<string>("Okato")
                        .HasColumnType("character varying(11)")
                        .HasMaxLength(11);

                    b.Property<string>("Okpo")
                        .HasColumnType("character varying(8)")
                        .HasMaxLength(8);

                    b.Property<string>("Okved")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Phone")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("PostAddress")
                        .HasColumnType("text");

                    b.HasKey("OrganizationId");

                    b.ToTable("OrganizationRequisites");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.OrganizationTypes.OrganizationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OrganizationTypes");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.Organizations.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrganizationTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentOrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<string>("TitleShort")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationTypeId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.Permissions.Permission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkingEntityOperationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RuleId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "WorkingEntityOperationId");

                    b.HasIndex("RuleId");

                    b.HasIndex("WorkingEntityOperationId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.Persons.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FactAddress")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("OtherPhones")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationAddress")
                        .HasColumnType("text");

                    b.Property<string>("Snils")
                        .HasColumnType("text");

                    b.Property<string>("SurName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.RefreshSessions.RefreshSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("RefreshSessions");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.RoleSystemModuleLinks.RoleSystemModuleLink", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SystemModuleId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "SystemModuleId");

                    b.HasIndex("SystemModuleId");

                    b.ToTable("RoleSystemModuleLinks");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.Rules.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.SystemModules.SystemModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SystemModules");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.UserRoleLinks.UserRoleLink", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoleLinks");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastActionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.WorkingEntities.WorkingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkingEntities");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.WorkingEntityOperations.WorkingEntityOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SystemModuleId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkingEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SystemModuleId");

                    b.HasIndex("WorkingEntityId");

                    b.ToTable("WorkingEntityOperations");
                });

            modelBuilder.Entity("Auth.DataLayer.Models.OrganizationDistrictLinks.OrganizationDistrictLink", b =>
                {
                    b.HasOne("Auth.DataLayer.Models.Organizations.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.DataLayer.Models.Organizations.Organization", b =>
                {
                    b.HasOne("Auth.DataLayer.Models.OrganizationTypes.OrganizationType", "OrganizationType")
                        .WithMany()
                        .HasForeignKey("OrganizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.DataLayer.Models.Permissions.Permission", b =>
                {
                    b.HasOne("Auth.DataLayer.Models.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.DataLayer.Models.Rules.Rule", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.DataLayer.Models.WorkingEntityOperations.WorkingEntityOperation", "WorkingEntityOperation")
                        .WithMany()
                        .HasForeignKey("WorkingEntityOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.DataLayer.Models.RoleSystemModuleLinks.RoleSystemModuleLink", b =>
                {
                    b.HasOne("Auth.DataLayer.Models.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.DataLayer.Models.SystemModules.SystemModule", "SystemModule")
                        .WithMany()
                        .HasForeignKey("SystemModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.DataLayer.Models.UserRoleLinks.UserRoleLink", b =>
                {
                    b.HasOne("Auth.DataLayer.Models.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.DataLayer.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.DataLayer.Models.Users.User", b =>
                {
                    b.HasOne("Auth.DataLayer.Models.Persons.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("Auth.DataLayer.Models.Users.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Auth.DataLayer.Models.WorkingEntityOperations.WorkingEntityOperation", b =>
                {
                    b.HasOne("Auth.DataLayer.Models.SystemModules.SystemModule", "SystemModule")
                        .WithMany()
                        .HasForeignKey("SystemModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Auth.DataLayer.Models.WorkingEntities.WorkingEntity", "WorkingEntity")
                        .WithMany()
                        .HasForeignKey("WorkingEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
